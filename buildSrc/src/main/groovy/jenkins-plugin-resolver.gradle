import org.example.JenkinsPlugins


plugins {
    id 'groovy'
    id 'idea'
    id 'com.adarshr.test-logger'
}

JenkinsPlugins.create(project)

java {
    toolchain {
        setLanguageVersion JavaLanguageVersion.of(11)
    }
}

idea {
    module {
        downloadJavadoc = true
        downloadSources = true
    }
}

configurations {
    testPlugins
}

dependencies {
    /*  Project's Shared library code dependencies */
    implementation 'org.codehaus.groovy:groovy-all:2.4.21'
    implementation "org.jenkins-ci.main:jenkins-core:${JenkinsPlugins.get().jenkinsVersion}"
    implementationDependencies delegate

    /*  JUnit5 dependencies */
    testImplementation platform('org.junit:junit-bom:5.9.2')
    testImplementation 'org.junit.jupiter:junit-jupiter'
    testRuntimeOnly 'org.junit.vintage:junit-vintage-engine'

    /*  Jenkins plugins dependencies */
    JenkinsPlugins.get().each { String dependency ->
        testPlugins dependency
    }

    /*  Dependencies of tests of Shared library and pipeline code */
    testImplementation 'com.lesfurets:jenkins-pipeline-unit:1.19'
    testImplementation 'org.spockframework:spock-core:1.3-groovy-2.4'
    testImplementationDependencies delegate
}

tasks.named('test') {
    dependsOn tasks.resolveTestPlugins
    inputs.files sourceSets.main.allSource.files

    final String STACK_WRITE_PROPERTY = 'pipeline.stack.write'
    final String LOGLEVEL_PROPERTY = 'testlogger.logLevel'
    final String JENKINS_TEST_HARNESS_BUILD_DIR_PROPERTY = 'buildDirectory'

    systemProperty STACK_WRITE_PROPERTY, System.getProperty(STACK_WRITE_PROPERTY) ?: findProperty(STACK_WRITE_PROPERTY)
    systemProperty LOGLEVEL_PROPERTY, System.getProperty(LOGLEVEL_PROPERTY) ?: findProperty(LOGLEVEL_PROPERTY)
    systemProperty JENKINS_TEST_HARNESS_BUILD_DIR_PROPERTY, buildDir

    useJUnitPlatform()

    testlogger {
        theme 'mocha-parallel'
        showStandardStreams true
        showFullStackTraces true
    }

    reports {
        junitXml {
            outputPerTestCase = true
        }
    }
}

tasks.register('resolveTestPlugins', Copy) {
    group 'verification'
    description 'Collect Jenkins plugins and make them available for Jenkins Test Harness'

    final String destinationDir = "${sourceSets.test.output.resourcesDir}/test-dependencies"

    doFirst {
        Set<ResolvedArtifact> resolvedArtifacts = configurations.testPlugins
            .resolvedConfiguration
            .resolvedArtifacts
        JenkinsPlugins.get().registerResolvedPlugins(resolvedArtifacts)
    }

    from configurations.testPlugins {
        rename { String filePath ->
            JenkinsPlugins.get().pluginFileNameForJenkinsInstance(filePath)
        }
    }
    include '*.hpi', '*.jpi'
    into destinationDir

    doLast {
        JenkinsPlugins.get().generatePluginsIndex("${destinationDir}/index")
    }
}

tasks.named('wrapper') {
    gradleVersion = project.gradleVersion
    distributionType = Wrapper.DistributionType.BIN
}


/*  Dependency helpers */

static void implementationDependencies(DependencyHandler context) {
    List<String> dependencies = [
        JenkinsPlugins.get()['job-dsl-core'],
    ]

    switch (JenkinsPlugins.get().jenkinsVersion) {
        case '2.277.4':
            dependencies << 'com.cloudbees:groovy-cps:1.22'
            break
        case '2.346.3':
            dependencies << JenkinsPlugins.get()['workflow-cps']
            break
        default:
            throw new IllegalArgumentException("Unrecognized Jenkins version: ${JenkinsPlugins.get().jenkinsVersion}")
    }

    dependencies.each { String dependency ->
        context.implementation dependency
    }
}

static void testImplementationDependencies(DependencyHandler context) {
    List<String> dependencies = [
        "org.jenkins-ci.main:jenkins-test-harness:${JenkinsPlugins.get().testHarnessVersion}",
        "org.jenkins-ci.main:jenkins-war:${JenkinsPlugins.get().jenkinsVersion}",
        JenkinsPlugins.get()['job-dsl'],
        "${JenkinsPlugins.get()['job-dsl']}@jar",
        "${JenkinsPlugins.get()['structs']}@jar",
    ]

    switch (JenkinsPlugins.get().jenkinsVersion) {
        case '2.277.4':
            dependencies << 'cglib:cglib-nodep:2.2.2'
            dependencies << "${JenkinsPlugins.get()['script-security']}@jar"
            break
        case '2.346.3':
            break
        default:
            throw new IllegalArgumentException("Unrecognized Jenkins version: ${JenkinsPlugins.get().jenkinsVersion}")
    }

    dependencies.each { String dependency ->
        context.testImplementation dependency
    }
}
