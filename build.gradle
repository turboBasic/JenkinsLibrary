plugins {
    id 'groovy'
    id 'com.adarshr.test-logger' version '3.2.0'
}

group = 'org.example'
version = '1.0-SNAPSHOT'

java {
    toolchain {
        languageVersion.set(JavaLanguageVersion.of(11))
    }
}

sourceSets {
    main {
        groovy {
            srcDirs = ['src']
        }
        resources {
            srcDirs = ['resources']
        }
    }
    test {
        groovy {
            srcDirs = ['test']
        }
        resources {
            srcDirs =  ['resources']
        }
    }
}

dependencies {
    implementation "org.codehaus.groovy:groovy-all:$groovyVersion"
    implementation "org.jenkins-ci.main:jenkins-core:$jenkinsVersion"
    implementation(pluginVersion('workflow-cps'))

    testImplementation 'com.lesfurets:jenkins-pipeline-unit:1.19'
    testImplementation 'org.spockframework:spock-core:2.4-M1-groovy-3.0'
    testImplementation 'org.junit.jupiter:junit-jupiter:5.9.2'
    testRuntimeOnly 'org.junit.platform:junit-platform-launcher'
    testRuntimeOnly 'org.junit.vintage:junit-vintage-engine'
    getJenkinsPlugins().values().each { pluginGAV ->
        testRuntimeOnly "${pluginGAV}@jar"
    }
}


/*  Tasks */

tasks.named('test') {
    useJUnitPlatform()
    maxParallelForks = 4

    testlogger {
        theme 'mocha-parallel'
        // Gradle log levels: ERROR->QUIET->WARN->LIFECYCLE->INFO->DEBUG
        // logLevel org.gradle.api.logging.LogLevel.WARN

        showStandardStreams false
        showFullStackTraces true
    }
    reports {
        junitXml {
            outputPerTestCase = true
        }
    }
}

tasks.named('wrapper') {
    gradleVersion = project.gradleVersion
    distributionType = Wrapper.DistributionType.BIN
}


/*  Helpers */

String pluginVersion(String name) {
    getJenkinsPlugins().getAt(name)
}

Map getJenkinsPlugins() {
    jenkinsPluginsVersions.tokenize()
        .collate(2)
        .collectEntries {
            String pluginName = it[0].split(':')[1]
            String pluginGAV = "${it[0]}:${it[1]}"
            [(pluginName): pluginGAV]
        }
}
