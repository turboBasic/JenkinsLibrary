import org.example.JenkinsPlugins


plugins {
    id 'jenkins-plugin-resolver'
}

group = 'org.example'
version = '1.0-SNAPSHOT'

sourceSets {
    main {
        groovy {
            srcDirs = ['src', 'vars']
        }
        resources {
            srcDirs = ['resources']
        }
    }
    test {
        groovy {
            srcDirs = ['test']
            exclude 'resources'
        }
        resources {
            srcDirs =  ['test/resources']
        }
    }
}

dependencies {
    implementationDependencies delegate
    testImplementationDependencies delegate
    jenkinsPluginDependencies delegate
    junit5Dependencies delegate
}

/*  Tasks */

tasks.named('test') {
    dependsOn tasks.resolveTestPlugins
    inputs.files sourceSets.main.allSource.files

    maxParallelForks = 4
}

tasks.register('resolveTestPlugins', Copy) {
    group 'verification'
    description 'Collect Jenkins plugins and make them available for Jenkins Test Harness'

    final String destinationDir = "${sourceSets.test.output.resourcesDir}/test-dependencies"

    doFirst {
        Set<ResolvedArtifact> resolvedArtifacts = configurations.testPlugins
            .resolvedConfiguration
            .resolvedArtifacts
        JenkinsPlugins.get().registerResolvedPlugins(resolvedArtifacts)
    }

    from configurations.testPlugins {
        rename { String filePath ->
            JenkinsPlugins.get().pluginFileNameForJenkinsInstance(filePath)
        }
    }
    include '*.hpi', '*.jpi'
    into destinationDir

    doLast {
        JenkinsPlugins.get().generatePluginsIndex("${destinationDir}/index")
    }
}

tasks.named('wrapper') {
    gradleVersion = project.gradleVersion
    distributionType = Wrapper.DistributionType.BIN
}


/*  Helpers */

static void implementationDependencies(DependencyHandler context) {
    List<String> dependencies = [
        "org.codehaus.groovy:groovy-all:2.4.21",
        "org.jenkins-ci.main:jenkins-core:${JenkinsPlugins.get().jenkinsVersion}",
        JenkinsPlugins.get()['job-dsl-core'],
    ]
    switch (JenkinsPlugins.get().jenkinsVersion) {
        case '2.277.4':
            dependencies << 'com.cloudbees:groovy-cps:1.22'
            break
        case '2.346.3':
            dependencies << JenkinsPlugins.get()['workflow-cps']
            break
        default:
            throw new IllegalArgumentException("Unrecognized Jenkins version: ${JenkinsPlugins.get().jenkinsVersion}")
    }

    dependencies.each { String dependency ->
        context.implementation dependency
    }
}

static void jenkinsPluginDependencies(DependencyHandler context) {
    JenkinsPlugins.get().each { String dependency ->
        context.testPlugins dependency
    }
}

static void junit5Dependencies(DependencyHandler context) {
    context.with {
        testImplementation platform('org.junit:junit-bom:5.9.2')
        testImplementation 'org.junit.jupiter:junit-jupiter'
        testRuntimeOnly 'org.junit.vintage:junit-vintage-engine'
    }
}

static void testImplementationDependencies(DependencyHandler context) {
    List<String> dependencies = [
        "com.lesfurets:jenkins-pipeline-unit:1.19",
        "org.spockframework:spock-core:1.3-groovy-2.4",
        "org.jenkins-ci.main:jenkins-test-harness:${JenkinsPlugins.get().testHarnessVersion}",
        "org.jenkins-ci.main:jenkins-war:${JenkinsPlugins.get().jenkinsVersion}",
        JenkinsPlugins.get()['job-dsl'],
        "${JenkinsPlugins.get()['job-dsl']}@jar",
        "${JenkinsPlugins.get()['structs']}@jar",
    ]
    switch (JenkinsPlugins.get().jenkinsVersion) {
        case '2.277.4':
            dependencies << 'cglib:cglib-nodep:2.2.2'
            dependencies << "${JenkinsPlugins.get()['script-security']}@jar"
            break
        case '2.346.3':
            break
        default:
            throw new IllegalArgumentException("Unrecognized Jenkins version: ${JenkinsPlugins.get().jenkinsVersion}")
    }

    dependencies.each { String dependency ->
        context.testImplementation dependency
    }
}
